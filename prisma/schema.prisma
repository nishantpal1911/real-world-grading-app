generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
}

enum TokenType {
  EMAIL
  API
}

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type TokenType
  emailToken String? @unique
  valid Boolean @default(true)
  expiresAt DateTime

  userId Int
  user User @relation(fields: [userId], references: [id])
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstName String
  lastName String
  isAdmin Boolean @default(false)
  social Json?

  courses CourseEnrollment[]
  testResults TestResult[] @relation(name: "results")
  testGraded TestResult[] @relation(name: "graded")
  tokens Token[]
}

model Course {
  id Int @id @default(autoincrement())
  name String @unique
  courseDetails String?

  members CourseEnrollment[]

  tests Test[]
}

model Test {
  id Int @id @default(autoincrement())
  date DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String

  courseId Int
  course Course @relation(fields: [courseId], references: [id])

  testResults TestResult[]
}

model TestResult {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  result Int

  testId Int
  test Test @relation(fields: [testId], references: [id])

  studentId Int
  student User @relation(fields: [studentId], references: [id], name: "results")

  graderId Int
  gradedBy User @relation(fields: [graderId], references: [id], name: "graded")
}

model CourseEnrollment {
  id Int @default(autoincrement())
  createdAt DateTime @default(now())
  role UserRole

  userId Int
  user User @relation(fields: [userId], references: [id])

  courseId Int
  course Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
  @@index([userId, role])
}
